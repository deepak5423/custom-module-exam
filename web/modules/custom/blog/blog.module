<?php 
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_preprocess_HOOK() for node templates.
 */
function blog_preprocess_node(&$variables) {
    if ($variables['node']->getType() === 'blog') {
      $body = $variables['node']->get('body')->value;
      $words = explode(' ', $body);
      $short_text = implode(' ', array_slice($words, 0, 50));
      $full_text = implode(' ', array_slice($words, 50));
  
      $variables['short_text'] = $short_text;
      $variables['full_text'] = $full_text;
    }
}

/**
 * Implements hook_preprocess_HOOK() for menu link templates.
 */
function blog_preprocess_menu_link(array &$variables) {
    if ($variables['menu_name'] == 'your_custom_menu' && $variables['link']['link_path'] == '/user/register') {
        $variables['link']['title'] = 'Register Now';
    }
}

/**
 * Implements hook_form_FORM_ID_alter() for the user registration form.
 */
function blog_form_user_register_form_alter(&$form, &$form_state, $form_id) {
    // Add a password field to the user registration form.
    $form['account']['full_name'] = [
      '#type' => 'TextField',
      '#title' => t('Full Name'),
      '#required' => TRUE,
      '#placeholder' => t('Full Name'),
  ];
    $form['account']['pass'] = [
        '#type' => 'password_confirm',
        '#title' => t('Password'),
        '#required' => TRUE,
    ];
}

/**
 * Implements hook_form_alter().
 */
function blog_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'user_register_form') {
    $form['#submit'][] = 'custom_registration_thankyou_submit';
  }
}

/**
 * Custom submit handler for the registration form.
 */
function custom_registration_thankyou_submit(&$form, FormStateInterface $form_state) {
  // Send a thank-you email to the user.
  $email = $form_state->getValue('mail');
  custom_registration_thankyou_send_email($email);
}

/**
 * Function to send the thank-you email.
 */
function custom_registration_thankyou_send_email($email) {
  // Customize the email subject and message as needed.
  $params = [
    'subject' => 'Thank You for Registering',
    'body' => 'Thank you for your submission. We will get back to you soon.',
  ];

  // Send the email.
  \Drupal::service('plugin.manager.mail')->mail(
    'custom_registration_thankyou',
    'registration_thankyou',
    $email,
    \Drupal::languageManager()->getDefaultLanguage()->getId(),
    $params
  );
}

/**
 * Implements hook_entity_view_alter() to add a button and JavaScript.
 */
function blog_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($entity->getEntityTypeId() == 'node') {
    $nid = $entity->id();
    $field_name = 'field_like_count';

    // Add a button to increment the field value.
    $build['increment_button'] = [
      '#type' => 'button',
      '#value' => t('Increment Field'),
      '#attributes' => [
        'name' => 'increment_button',
        'class' => ['increment-field-button'],
        'data-nid' => $nid,
        'data-field' => $field_name,
      ],
    ];

    // // Attach JavaScript library to handle the button click.
    $build['#attached']['library'][] = 'blog/my-library';
  }
}

/**
 * Form submission handler to increment the count and save the node.
 */
function blog_form_submit(&$form, FormStateInterface $form_state) {
  dd('hii');
  $nid = \Drupal::routeMatch()->getParameter('node')->id();

  // Load the node.
  $node = \Drupal\node\Entity\Node::load($nid);

  // Increment the value of the field you want to update.
  $field_value = $node->get('field_like_count')->value;
  $new_value = $field_value + 1;
  $node->set('field_like_count', $new_value);
  $node->save();

  $node = $form_state->getFormObject()->getEntity();
  $count = $node->get('field_like_count')->value;
  $count++;
  $node->set('field_like_count', $count);
  $node->save();
}

/**
 * Implements hook_cron().
 */
function blog_cron() {
  // Check if it's 5 AM.
  if (date('G') == 5) {
    // Calculate the timestamp for one year ago.
    $oneYearAgo = strtotime('-1 year');

    // Load and delete blogs older than one year created by the Guest Bloggers role.
    $query = \Drupal::entityQuery('node')
      ->condition('type', 'blog')
      ->condition('created', $oneYearAgo, '<')
      ->condition('uid', 0, '>')
      ->condition('uid', 6, 'IN');
    $nids = $query->execute();

    if (!empty($nids)) {
      $storage = \Drupal::entityTypeManager()->getStorage('node');
      $nodes = $storage->loadMultiple($nids);
      $storage->delete($nodes);
    }
  }
}

?>
